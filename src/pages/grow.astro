---
import MainLayout from '../layouts/MainLayout.astro';
import '../styles/basic-grid.css';
import '../styles/proj-images_grow.css';
import '../styles/header.css';
import '../styles/lines.css';


import grow1 from '../media/Projects/grow/grow1.gif';
import grow2 from '../media/Projects/grow/grow2.gif';
import grow3 from '../media/Projects/grow/grow3.gif';
import grow4 from '../media/Projects/grow/grow4.gif';
import grow5 from '../media/Projects/grow/grow5.gif';
import grow6 from '../media/Projects/grow/grow6.jpg';
import grow7 from '../media/Projects/grow/grow7.jpg';
import grow8 from '../media/Projects/grow/grow8.jpg';
import grow9 from '../media/Projects/grow/grow9.png';
import grow10 from '../media/Projects/grow/grow10.png';
import grow11 from '../media/Projects/grow/grow11.png';
import grow12 from '../media/Projects/grow/grow12.png';
import grow13 from '../media/Projects/grow/grow13.png';
import grow14 from '../media/Projects/grow/grow14.png';
import grow15 from '../media/Projects/grow/grow15.png';
import grow16 from '../media/Projects/grow/grow16.png';
import grow17 from '../media/Projects/grow/grow17.png';
import grow18 from '../media/Projects/grow/grow18.png';
import grow19 from '../media/Projects/grow/grow19.png';
import grow20 from '../media/Projects/grow/grow20.png';
import grow21 from '../media/Projects/grow/grow21.png';
import grow22 from '../media/Projects/grow/grow22.png';
import grow23 from '../media/Projects/grow/grow23.png';
import grow24 from '../media/Projects/grow/grow24.png';
import grow25 from '../media/Projects/grow/grow25.png';
import grow26 from '../media/Projects/grow/grow26.png';
import grow27 from '../media/Projects/grow/grow27.png';
import grow28 from '../media/Projects/grow/grow28.png';
import grow29 from '../media/Projects/grow/grow29.gif';
import grow30 from '../media/Projects/grow/grow30.png';
import grow31 from '../media/Projects/grow/grow31.gif';
import grow32 from '../media/Projects/grow/grow32.png';




---

<MainLayout title="work">


  <header class="main-header">
    <nav class="navigation">
        <ul>
            <li><a href="/" class="nav-link">DOMINIC RISHE</a></li>
        </ul>
        <ul class="nav-links-right">
            <li><a href="/work/" class="nav-link">WORK</a></li>
            <!-- Add more links here if needed -->
        </ul>
    </nav>
</header>



  <section id="section-hero">
    <h2>
      <small>MARBLE, JAVASCRIPT // SUMMER 2024 // GARFAGNANA, IT</small>
      <!-- <span>SUMMER 2024 / GARFAGNANA, IT</span> -->
      <strong>GROW.JS</strong>
    </h2>
    <div class="media-container">
      <figure class="media">
        <img src={grow30.src} alt="fashion">
      </figure>
      <small></small>
    </div>
    <div class="pattern-container" id="pattern1">
      <div class="lvl1"></div>
      <div class="lvl2"></div>
  </div>
  </div>
    <p class="text">
      The form for this table, rather than being sketched or modeled, was generated with a piece of code. Each time the code is run, the result is a unique design which will only ever be fabricated once, and yet is part of an infinite collection — one of one of a kind.
    </p>
    <p class="text">
      The algorithm simulates the growth of simple natural structures like coral or lichen. The choice of such an algorithm interrogates the semiotics of form-finding, asking to what extent the information recorded in a design through its method of form-finding can make the purpose of the design legible — in this case, can a table’s form, derived from the process by which groups of coral grow together, signal the final purpose of the table, which is to facilitate the growth of relationships through gathering.
    </p>
  </section>

  <section id="section-5">
    <div class="media-container">
      <figure class="media">
        <img src={grow17.src} alt="diana">
      </figure>
      <small></small>
    </div>
    <div class="media-container">
      <figure class="media">
        <img src={grow18.src} alt="diana">
      </figure>
      <small></small>
    </div>
    <div class="media-container">
      <figure class="media">
        <img src={grow22.src} alt="diana">
      </figure>
      <small></small>
    </div>
  </section>



  <section id="section-centered">
    <div class="media-container">
      <figure class="media">
        <img src={grow12.src} alt="diana">
      </figure>
      <small></small>
    </div>
    <div class="media-container">
      <figure class="media">
        <img src={grow5.src} alt="abuelo">
      </figure>
      <small></small>
    </div>
  </section>

  <section class="text-container">
    <div class="pattern-container" id="pattern2">
      <div class="lvl1"></div>
      <div class="lvl2"></div>
  </div>
    <p class="text">
      The work was completed in collaboration with Garfagnana Innovazione as part of the Digital Stone Project residency. For the summer of 2024 it's on display at the show 'Pietra Eterna' in Barga, Italy. 
    </p>
  </section>


  <section id="section-0">
    <div class="media-container">
      <figure class="media">
        <img src={grow3.src} alt="diana">
      </figure>
      <small></small>
    </div>
    <div class="media-container">
      <figure class="media">
        <img src={grow6.src} alt="diana">
      </figure>
      <small></small>
    </div>
    <div class="media-container">
      <figure class="media">
        <img src={grow2.src} alt="diana">
      </figure>
      <small></small>
    </div>
  </section>

  <section class="text-container">
    <div class="pattern-container" id="pattern3">
      <div class="lvl1"></div>
      <div class="lvl2"></div>
  </div>
    <p class="text">
      On the underside of the top is an inscription — <br>“GROW.JS ME FECIT”. Me fecit is Latin for “made me” and was a common way for works to be signed in the Middle Ages — usually not with the name of the artist but rather the patron, the generator of the commission, in this case the filename containing my code. The style of the script is taken from the inscriptions on the Duomo di San Martino in Lucca, near where the marble is from.
    </p>
  </section>

  <section id="section-1">
    <div class="media-container">
      <figure class="media">
        <img src={grow23.src} alt="tricycle">
      </figure>
      <small></small>
    </div>
    <div class="media-container">
      <figure class="media">
        <img src={grow29.src} alt="building">
      </figure>
      <small></small>
    </div>
  </section>

  <section id="section-2">
    <div class="media-container">
      <figure class="media">
        <img src={grow31.src} alt="tote bag">
      </figure>
      <small></small>
    </div>
  </section>

  <section class="text-container">
    <p class="text">
      The first output of the Grow.js collection is <br>currently available for purchase.<br><br>Please inquire here:
    </p>
    <a href="https://forms.gle/Xi7Xam8o5PLHmzio6" class="inquire-button"  target="_blank">Inquire</a>
    <span id="and"><br><br> & </span>
  </section>


  <section id="section-4">
    <div class="media-container">
      <figure class="media">
        <img src={grow32.src} alt="bird">
      </figure>
      <small></small>
    </div>
  </section>


  <script>
    function getRandomWidth() {
        return Math.floor(Math.random() * 70) + 10; // Width between 10px and 300px
    }

    function createRandomDivs(parent) {
        // Clear existing divs
        parent.innerHTML = '';

        // Create a random number of divs between 3 and 10
        const numberOfDivs = Math.floor(Math.random() * 2) + 3;

        for (let i = 0; i < numberOfDivs; i++) {
            const div = document.createElement('div');
            div.className = 'line';

            // Randomize width
            div.style.width = getRandomWidth() + 'px';
            
            // Randomize background color
            div.style.backgroundColor = Math.random() < 0.5 ? 'black' : 'transparent';

            parent.appendChild(div);
        }
    }

    function randomizePattern(container) {
        const levels = container.querySelectorAll('.lvl1, .lvl2');
        levels.forEach(level => {
            createRandomDivs(level);
        });
    }

    function initializePatternGenerator(containerId) {
        const container = document.getElementById(containerId);
        randomizePattern(container);
        container.addEventListener('click', () => randomizePattern(container));
    }

    // Initialize pattern generators for each container
    initializePatternGenerator('pattern1');
    initializePatternGenerator('pattern2');
    initializePatternGenerator('pattern3');
</script>










      




</MainLayout>

